import React, { useState, useEffect } from 'react';
import { Plus, Trash2, Check, Calendar, Clock, Star } from 'lucide-react';

const TodoApp = () => {
  const [tasks, setTasks] = useState([]);
  const [newTask, setNewTask] = useState('');
  const [filter, setFilter] = useState('all');

  // Add a new task
  const addTask = () => {
    if (newTask.trim() !== '') {
      const task = {
        id: Date.now(),
        text: newTask.trim(),
        completed: false,
        createdAt: new Date(),
        priority: 'medium'
      };
      setTasks([task, ...tasks]);
      setNewTask('');
    }
  };

  // Toggle task completion
  const toggleTask = (id) => {
    setTasks(tasks.map(task => 
      task.id === id ? { ...task, completed: !task.completed } : task
    ));
  };

  // Delete a task
  const deleteTask = (id) => {
    setTasks(tasks.filter(task => task.id !== id));
  };

  // Toggle priority
  const togglePriority = (id) => {
    setTasks(tasks.map(task => 
      task.id === id ? { 
        ...task, 
        priority: task.priority === 'high' ? 'medium' : 'high' 
      } : task
    ));
  };

  // Filter tasks
  const filteredTasks = tasks.filter(task => {
    if (filter === 'active') return !task.completed;
    if (filter === 'completed') return task.completed;
    return true;
  });

  // Handle Enter key
  const handleKeyPress = (e) => {
    if (e.key === 'Enter') {
      addTask();
    }
  };

  const completedCount = tasks.filter(task => task.completed).length;
  const totalTasks = tasks.length;

  return (
    <div className="min-h-screen bg-gradient-to-br from-indigo-900 via-purple-900 to-pink-800 relative overflow-hidden">
      {/* Animated background elements */}
      <div className="absolute inset-0 overflow-hidden">
        <div className="absolute -top-4 -left-4 w-72 h-72 bg-purple-300 rounded-full mix-blend-multiply filter blur-xl opacity-20 animate-pulse"></div>
        <div className="absolute -top-4 -right-4 w-72 h-72 bg-yellow-300 rounded-full mix-blend-multiply filter blur-xl opacity-20 animate-pulse animation-delay-2000"></div>
        <div className="absolute -bottom-8 left-20 w-72 h-72 bg-pink-300 rounded-full mix-blend-multiply filter blur-xl opacity-20 animate-pulse animation-delay-4000"></div>
      </div>

      <div className="relative z-10 container mx-auto px-4 py-8 max-w-2xl">
        {/* Header */}
        <div className="text-center mb-12">
          <h1 className="text-6xl font-bold bg-gradient-to-r from-white to-purple-200 bg-clip-text text-transparent mb-4 tracking-tight">
            Daily Flow
          </h1>
          <p className="text-purple-200 text-lg font-light">
            Transform your day, one task at a time
          </p>
        </div>

        {/* Stats */}
        <div className="grid grid-cols-3 gap-4 mb-8">
          <div className="bg-white/10 backdrop-blur-lg rounded-2xl p-4 border border-white/20">
            <div className="text-2xl font-bold text-white">{totalTasks}</div>
            <div className="text-purple-200 text-sm">Total Tasks</div>
          </div>
          <div className="bg-white/10 backdrop-blur-lg rounded-2xl p-4 border border-white/20">
            <div className="text-2xl font-bold text-emerald-300">{completedCount}</div>
            <div className="text-purple-200 text-sm">Completed</div>
          </div>
          <div className="bg-white/10 backdrop-blur-lg rounded-2xl p-4 border border-white/20">
            <div className="text-2xl font-bold text-orange-300">{totalTasks - completedCount}</div>
            <div className="text-purple-200 text-sm">Remaining</div>
          </div>
        </div>

        {/* Add Task */}
        <div className="bg-white/10 backdrop-blur-lg rounded-3xl p-6 mb-8 border border-white/20 shadow-2xl">
          <div className="flex gap-3">
            <input
              type="text"
              value={newTask}
              onChange={(e) => setNewTask(e.target.value)}
              onKeyPress={handleKeyPress}
              placeholder="What needs to be done today?"
              className="flex-1 bg-white/20 backdrop-blur-sm rounded-2xl px-6 py-4 text-white placeholder-purple-200 border border-white/30 focus:outline-none focus:ring-2 focus:ring-purple-300 focus:border-transparent transition-all duration-300 text-lg"
            />
            <button
              onClick={addTask}
              className="bg-gradient-to-r from-purple-500 to-pink-500 hover:from-purple-600 hover:to-pink-600 rounded-2xl px-6 py-4 text-white font-semibold shadow-lg hover:shadow-xl transform hover:scale-105 transition-all duration-300 flex items-center gap-2"
            >
              <Plus className="w-5 h-5" />
              Add
            </button>
          </div>
        </div>

        {/* Filter Buttons */}
        <div className="flex justify-center mb-8">
          <div className="bg-white/10 backdrop-blur-lg rounded-2xl p-2 border border-white/20">
            {['all', 'active', 'completed'].map((filterType) => (
              <button
                key={filterType}
                onClick={() => setFilter(filterType)}
                className={`px-6 py-2 rounded-xl font-medium transition-all duration-300 capitalize ${
                  filter === filterType
                    ? 'bg-white/20 text-white shadow-lg'
                    : 'text-purple-200 hover:text-white hover:bg-white/10'
                }`}
              >
                {filterType}
              </button>
            ))}
          </div>
        </div>

        {/* Tasks List */}
        <div className="space-y-3">
          {filteredTasks.length === 0 ? (
            <div className="text-center py-12">
              <div className="text-6xl mb-4">ðŸŽ‰</div>
              <p className="text-purple-200 text-xl font-light">
                {filter === 'completed' ? 'No completed tasks yet' : 
                 filter === 'active' ? 'No active tasks' : 
                 'Ready to start your productive day?'}
              </p>
            </div>
          ) : (
            filteredTasks.map((task, index) => (
              <div
                key={task.id}
                className={`bg-white/10 backdrop-blur-lg rounded-2xl p-5 border border-white/20 shadow-lg hover:shadow-xl transition-all duration-300 transform hover:scale-[1.02] ${
                  task.completed ? 'opacity-75' : ''
                }`}
                style={{ animationDelay: `${index * 100}ms` }}
              >
                <div className="flex items-center gap-4">
                  <button
                    onClick={() => toggleTask(task.id)}
                    className={`w-6 h-6 rounded-full border-2 transition-all duration-300 flex items-center justify-center ${
                      task.completed
                        ? 'bg-emerald-500 border-emerald-500'
                        : 'border-purple-300 hover:border-emerald-400'
                    }`}
                  >
                    {task.completed && <Check className="w-4 h-4 text-white" />}
                  </button>

                  <div className="flex-1">
                    <p className={`text-lg transition-all duration-300 ${
                      task.completed 
                        ? 'line-through text-purple-300' 
                        : 'text-white'
                    }`}>
                      {task.text}
                    </p>
                    <div className="flex items-center gap-3 mt-2 text-sm text-purple-200">
                      <div className="flex items-center gap-1">
                        <Calendar className="w-4 h-4" />
                        {task.createdAt.toLocaleDateString()}
                      </div>
                      <div className="flex items-center gap-1">
                        <Clock className="w-4 h-4" />
                        {task.createdAt.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}
                      </div>
                    </div>
                  </div>

                  <button
                    onClick={() => togglePriority(task.id)}
                    className={`p-2 rounded-xl transition-all duration-300 ${
                      task.priority === 'high'
                        ? 'text-yellow-400 hover:bg-yellow-400/20'
                        : 'text-purple-300 hover:bg-white/10 hover:text-yellow-400'
                    }`}
                  >
                    <Star className={`w-5 h-5 ${task.priority === 'high' ? 'fill-current' : ''}`} />
                  </button>

                  <button
                    onClick={() => deleteTask(task.id)}
                    className="p-2 text-red-300 hover:text-red-400 hover:bg-red-400/20 rounded-xl transition-all duration-300"
                  >
                    <Trash2 className="w-5 h-5" />
                  </button>
                </div>
              </div>
            ))
          )}
        </div>

        {/* Progress Bar */}
        {totalTasks > 0 && (
          <div className="mt-8 bg-white/10 backdrop-blur-lg rounded-2xl p-6 border border-white/20">
            <div className="flex justify-between items-center mb-3">
              <span className="text-white font-medium">Progress</span>
              <span className="text-purple-200">
                {Math.round((completedCount / totalTasks) * 100)}%
              </span>
            </div>
            <div className="w-full bg-white/20 rounded-full h-3">
              <div 
                className="bg-gradient-to-r from-emerald-400 to-blue-400 h-3 rounded-full transition-all duration-500 ease-out"
                style={{ width: `${(completedCount / totalTasks) * 100}%` }}
              ></div>
            </div>
          </div>
        )}
      </div>
    </div>
  );
};

export default TodoApp;